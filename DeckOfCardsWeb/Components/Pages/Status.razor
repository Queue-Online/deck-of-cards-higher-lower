@page "/status"
@rendermode InteractiveServer
@using DeckOfCardsWeb.Services
@inject StatusService StatusService

<PageTitle>Status & Logs</PageTitle>

<h1>Status & Logs</h1>

<div class="mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Health Status</h5>
                </div>
                <div class="card-body">
                    @if (healthStatus != null)
                    {
                        <div class="mb-2">
                            <strong>Status:</strong> 
                            <span class="badge @GetStatusBadgeClass(healthStatus.Status)">
                                @healthStatus.Status
                            </span>
                        </div>
                        <div class="mb-2">
                            <strong>Total Duration:</strong> @(healthStatus.TotalDuration?.ToString("F2") ?? "N/A") ms
                        </div>
                        <div class="mb-2">
                            <strong>Timestamp:</strong> @healthStatus.Timestamp?.ToString("yyyy-MM-dd HH:mm:ss UTC")
                        </div>
                        
                        @if (healthStatus.Entries != null && healthStatus.Entries.Length > 0)
                        {
                            <hr />
                            <h6>Health Checks:</h6>
                            <ul class="list-unstyled">
                                @foreach (var entry in healthStatus.Entries)
                                {
                                    <li class="mb-2">
                                        <strong>@entry.Name:</strong> 
                                        <span class="badge @GetStatusBadgeClass(entry.Status ?? "")">@entry.Status</span>
                                        @if (!string.IsNullOrEmpty(entry.Description))
                                        {
                                            <div class="small text-muted">@entry.Description</div>
                                        }
                                    </li>
                                }
                            </ul>
                        }
                    }
                    else if (isLoadingStatus)
                    {
                        <div class="text-center">
                            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                            <span>Loading status...</span>
                        </div>
                    }
                    else
                    {
                        <div class="text-danger">Failed to load health status</div>
                    }
                    
                    <button class="btn btn-primary btn-sm mt-3" @onclick="RefreshHealthStatus" disabled="@isLoadingStatus">
                        Refresh Status
                    </button>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Application Logs</h5>
                </div>
                <div class="card-body">
                    @if (logsResponse != null)
                    {
                        @if (!string.IsNullOrEmpty(logsResponse.File))
                        {
                            <div class="mb-2">
                                <strong>Log File:</strong> @logsResponse.File
                            </div>
                        }
                        
                        @if (logsResponse.Logs != null && logsResponse.Logs.Length > 0)
                        {
                            <div class="mb-2">
                                <strong>Recent Logs (@logsResponse.Logs.Length lines):</strong>
                            </div>
                            <div style="max-height: 500px; overflow-y: auto; background-color: #f8f9fa; padding: 10px; border-radius: 4px; font-family: monospace; font-size: 12px;">
                                @foreach (var log in logsResponse.Logs.Reverse())
                                {
                                    <div class="mb-1">@log</div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-muted">No logs available</div>
                        }
                    }
                    else if (isLoadingLogs)
                    {
                        <div class="text-center">
                            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                            <span>Loading logs...</span>
                        </div>
                    }
                    else
                    {
                        <div class="text-danger">Failed to load logs</div>
                    }
                    
                    <button class="btn btn-primary btn-sm mt-3" @onclick="RefreshLogs" disabled="@isLoadingLogs">
                        Refresh Logs
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HealthStatusResponse? healthStatus;
    private LogsResponse? logsResponse;
    private bool isLoadingStatus = false;
    private bool isLoadingLogs = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStatus();
        await LoadLogs();
    }

    private async Task LoadStatus()
    {
        isLoadingStatus = true;
        try
        {
            healthStatus = await StatusService.GetHealthStatusAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading status: {ex.Message}");
        }
        finally
        {
            isLoadingStatus = false;
            StateHasChanged();
        }
    }

    private async Task LoadLogs()
    {
        isLoadingLogs = true;
        try
        {
            logsResponse = await StatusService.GetLogsAsync(100);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading logs: {ex.Message}");
        }
        finally
        {
            isLoadingLogs = false;
            StateHasChanged();
        }
    }

    private async Task RefreshHealthStatus()
    {
        await LoadStatus();
    }

    private async Task RefreshLogs()
    {
        await LoadLogs();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToUpper() switch
        {
            "HEALTHY" => "bg-success",
            "UNHEALTHY" => "bg-danger",
            "DEGRADED" => "bg-warning",
            _ => "bg-secondary"
        };
    }
}

