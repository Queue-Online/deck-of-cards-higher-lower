# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which sets up Snyk to analyze the full Snyk platform (Snyk Open Source, Snyk Code,
# Snyk Container and Snyk Infrastructure as Code)
# The setup installs the Snyk CLI - for more details on the possible commands
# check https://docs.snyk.io/snyk-cli/cli-reference
# The results of Snyk Code are then uploaded to GitHub Security Code Scanning
#
# In order to use the Snyk Action you will need to have a Snyk API token.
# More details in https://github.com/snyk/actions#getting-your-snyk-token
# or you can signup for free at https://snyk.io/login
#
# For more examples, including how to limit scans to only high-severity issues
# and fail PR checks, see https://github.com/snyk/actions/

name: Snyk Security

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

        # For Snyk Open Source you must first set up the development environment for your application's dependencies
        # For example for Node
        #- uses: actions/setup-node@v4
        #  with:
        #    node-version: 20

        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
      # Exit code 2 means vulnerabilities found, which is expected - we continue anyway
      - name: Snyk Code test
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -z "$SNYK_TOKEN" ]; then
            echo "Warning: SNYK_TOKEN not set. Skipping Snyk analysis."
            echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"results": []}]}' > snyk-code.sarif
            exit 0
          fi
          snyk code test --sarif > snyk-code.sarif 2>&1 || true
          if [ -f snyk-code.sarif ] && [ -s snyk-code.sarif ]; then
            echo "Snyk Code analysis completed successfully"
          else
            echo "Snyk Code analysis completed (no issues found or analysis failed)"
            echo '{"version": "2.1.0", "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"results": []}]}' > snyk-code.sarif
          fi

      # Runs Snyk Open Source (SCA) analysis on .NET projects
      - name: Snyk Open Source test
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -z "$SNYK_TOKEN" ]; then
            echo "Warning: SNYK_TOKEN not set. Skipping Snyk Open Source test."
            exit 0
          fi
          dotnet restore if-tester.sln || true
          # Test individual projects that Snyk supports
          for project in deck-of-cards-api/deck-of-cards-api.csproj deck-of-cards-test/deck-of-cards-test.csproj; do
            if [ -f "$project" ]; then
              snyk test --file="$project" --json > "snyk-test-$(basename $project .csproj).json" || true
            fi
          done

      # Runs Snyk Open Source monitor
      - name: Snyk Open Source monitor
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -z "$SNYK_TOKEN" ]; then
            echo "Warning: SNYK_TOKEN not set. Skipping Snyk monitor."
            exit 0
          fi
          for project in deck-of-cards-api/deck-of-cards-api.csproj deck-of-cards-test/deck-of-cards-test.csproj; do
            if [ -f "$project" ]; then
              snyk monitor --file="$project" || true
            fi
          done

      # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif
        continue-on-error: true
